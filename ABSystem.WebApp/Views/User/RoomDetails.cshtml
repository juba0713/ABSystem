@using Microsoft.AspNetCore.Identity
@using ABSystem.Data.Models
@using ABSystem.Services.Dto
@using ABSystem.Resources.Constants
@inject SignInManager<User> signInManager
@inject UserManager<User> userManager
@inject RoleManager<IdentityRole> roleManager

@{
    // Get the logged-in user using UserManager
    User loggedInUser = await userManager.FindByEmailAsync(User.Identity.Name ?? "");
}
@model ViewDto
<html>
<head>
    <title>Dashboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="~/css/common.css" />
    <link rel="stylesheet" href="~/css/header.css" />
    <link rel="stylesheet" href="~/css/sidebar.css" />
    <link rel="stylesheet" href="~/css/user/roomdetails.css" />
</head>
<body>
    <div class="container">
        <partial name="Header" />
        <main>
            <partial name="Sidebar" />
            <div class="main-content">
                <div class="sub-header">
                    Room Details
                    <a class="action-btn back-btn border-radius-5" href="/rooms-list"><img src="~/icons/back.svg" alt="add" />BACK</a>
                </div>
                <div class="content">
                    
                    <div class="images-container">
    
                        <img src="@Model.RoomDto.ImagePath" class="image-profile" />
                        <div class="image-list">
                            @if (Model.RoomDto.ImagesPath != null && Model.RoomDto.ImagesPath.Any())
                            {
                                foreach (var image in Model.RoomDto.ImagesPath)
                                {
                                    <img src="@image" />
                                }                                 
                            }
                            else
                            {
                                <div>No Images Found</div>
                            }
                        </div>
                    </div>
                    <div class="details-container">
                        <div class="d-1">
                            @Model.RoomDto.Name
                        </div>
                        <div class="d-1">
                            <div>
                                <svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M21.5059 16.3202V8.32021C21.5055 7.96949 21.4129 7.62502 21.2374 7.32138C21.0619 7.01773 20.8096 6.76558 20.5059 6.59021L13.5059 2.59021C13.2018 2.41468 12.8569 2.32227 12.5059 2.32227C12.1548 2.32227 11.8099 2.41468 11.5059 2.59021L4.50586 6.59021C4.20212 6.76558 3.94984 7.01773 3.77432 7.32138C3.5988 7.62502 3.50622 7.96949 3.50586 8.32021V16.3202C3.50622 16.6709 3.5988 17.0154 3.77432 17.3191C3.94984 17.6227 4.20212 17.8749 4.50586 18.0502L11.5059 22.0502C11.8099 22.2258 12.1548 22.3182 12.5059 22.3182C12.8569 22.3182 13.2018 22.2258 13.5059 22.0502L20.5059 18.0502C20.8096 17.8749 21.0619 17.6227 21.2374 17.3191C21.4129 17.0154 21.5055 16.6709 21.5059 16.3202Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M8.00586 4.53027L12.5059 7.13027L17.0059 4.53027" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M8.00586 20.1103V14.9203L3.50586 12.3203" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M21.5059 12.3203L17.0059 14.9203V20.1103" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M3.77539 7.28027L12.5054 12.3303L21.2354 7.28027" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M12.5059 22.4003V12.3203" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                                Facility
                            </div>
                            <div>@Model.RoomDto.Facility</div>
                        </div>
                        <div class="d-1">
                            <div>
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M21 10C21 17 12 23 12 23C12 23 3 17 3 10C3 7.61305 3.94821 5.32387 5.63604 3.63604C7.32387 1.94821 9.61305 1 12 1C14.3869 1 16.6761 1.94821 18.364 3.63604C20.0518 5.32387 21 7.61305 21 10Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M12 13C13.6569 13 15 11.6569 15 10C15 8.34315 13.6569 7 12 7C10.3431 7 9 8.34315 9 10C9 11.6569 10.3431 13 12 13Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                                Location
                            </div>
                            <div>@Model.RoomDto.Address</div>
                        </div>
                        <div class="d-1">
                            <div>
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M17 21V19C17 17.9391 16.5786 16.9217 15.8284 16.1716C15.0783 15.4214 14.0609 15 13 15H5C3.93913 15 2.92172 15.4214 2.17157 16.1716C1.42143 16.9217 1 17.9391 1 19V21" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M9 11C11.2091 11 13 9.20914 13 7C13 4.79086 11.2091 3 9 3C6.79086 3 5 4.79086 5 7C5 9.20914 6.79086 11 9 11Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M23 20.9999V18.9999C22.9993 18.1136 22.7044 17.2527 22.1614 16.5522C21.6184 15.8517 20.8581 15.3515 20 15.1299" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M16 3.12988C16.8604 3.35018 17.623 3.85058 18.1676 4.55219C18.7122 5.2538 19.0078 6.11671 19.0078 7.00488C19.0078 7.89305 18.7122 8.75596 18.1676 9.45757C17.623 10.1592 16.8604 10.6596 16 10.8799" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                                Capacity
                            </div>
                            <div>@Model.RoomDto.Capacity Capacity</div>
                        </div>
                        <div class="d-1">
                            <div>
                                <svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M2.79492 3.92969H8.79492C9.85579 3.92969 10.8732 4.35111 11.6233 5.10126C12.3735 5.85141 12.7949 6.86882 12.7949 7.92969V21.9297C12.7949 21.134 12.4789 20.371 11.9162 19.8084C11.3536 19.2458 10.5906 18.9297 9.79492 18.9297H2.79492V3.92969Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M22.7949 3.92969H16.7949C15.7341 3.92969 14.7166 4.35111 13.9665 5.10126C13.2163 5.85141 12.7949 6.86882 12.7949 7.92969V21.9297C12.7949 21.134 13.111 20.371 13.6736 19.8084C14.2362 19.2458 14.9993 18.9297 15.7949 18.9297H22.7949V3.92969Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                                Description
                            </div>
                            <div>@Model.RoomDto.Description</div>
                        </div>
                        <button data-toggle="modal" data-target="#bookingModal" class="action-btn book-btn"><i class="fa fa-address-book" style="font-size:1vw;color:#fff"></i>BOOK NOW</button>
                    </div>
                </div>    
            </div>
        </main>
    </div>
    <div class="modal fade" id="bookingModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    @if (TempData["ErrorBooking"] != null)
                    {
                        <div class="alert alert-error" >
                            <div class="icon__wrapper">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M10.2908 3.8602L1.82075 18.0002C1.64612 18.3026 1.55372 18.6455 1.55274 18.9947C1.55176 19.3439 1.64224 19.6873 1.81518 19.9907C1.98812 20.2941 2.23748 20.547 2.53846 20.7241C2.83944 20.9012 3.18155 20.9964 3.53075 21.0002H20.4708C20.82 20.9964 21.1621 20.9012 21.463 20.7241C21.764 20.547 22.0134 20.2941 22.1863 19.9907C22.3593 19.6873 22.4497 19.3439 22.4488 18.9947C22.4478 18.6455 22.3554 18.3026 22.1808 18.0002L13.7108 3.8602C13.5325 3.56631 13.2815 3.32332 12.9819 3.15469C12.6824 2.98605 12.3445 2.89746 12.0008 2.89746C11.657 2.89746 11.3191 2.98605 11.0196 3.15469C10.72 3.32332 10.469 3.56631 10.2908 3.8602Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M12 9V13" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M12 17H12.01" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                            </div>
                            <p>@MessageConstant.BOOK_DATE_REQUIRED</p>
                            <span class="mdi mdi-open-in-new open"></span>
                            <span class="mdi mdi-close close"></span>
                        </div>
                    }
                    <form asp-controller="UserBook" asp-action="AddBook" method="POST">
                        <input type="hidden" asp-for="UserBookDto.BookDate" id="bookDate" value=""/>
                        <input type="hidden" asp-for="UserBookDto.RoomId" value="@Model.RoomDto.Id" />
                        <div class="personal-details">
                            <div class="highlight">Personal Details</div>
                            <div>
                                <div class="input-field">
                                    <label>First Name</label>
                                    <input type="text" asp-for="UserBookDto.FirstName" value="@loggedInUser!.FirstName" readonly/>
                                </div>
                                <div class="input-field">
                                    <label>Last Name</label>
                                    <input type="text" asp-for="UserBookDto.LastName" value="@loggedInUser!.LastName" readonly />
                                </div>
                            </div>
                            <div>
                                <div class="input-field">
                                    <label>Email</label>
                                    <input type="text" asp-for="UserBookDto.Email" value="@loggedInUser!.Email" readonly />
                                </div>
                                <div class="input-field">
                                    <label>Phone Number</label>
                                    <input type="text"
                                           id="phoneNumber"
                                           asp-for="UserBookDto.PhoneNumber"
                                           pattern="^[0-9]*$"
                                           value="@loggedInUser!.PhoneNumber"
                                           required
                                           oninput="this.value = this.value.replace(/[^0-9]/g, '')" />
                                </div>
                            </div>
                            <div>
                                <div class="input-field">
                                    <label>Address</label>
                                    <input type="text" asp-for="UserBookDto.Address" value="@loggedInUser!.Address" required  />
                                </div>
                            </div>
                            <div class="bd-1">
                                <div class="input-field">
                                    <label>Start Time</label>
                                    <input type="time" asp-for="UserBookDto.StartTime" />
                                </div>
                                <div class="input-field">
                                    <label>End Time</label>
                                    <input type="time" asp-for="UserBookDto.EndTime" />
                                </div>
                            </div>
                            <div>
                                <div class="input-field">
                                    <label>Request</label>
                                    <textarea type="text" asp-for="UserBookDto.Request" placeholder="Any Special Request"></textarea>
                                </div>
                            </div>
                            <div class="recurrence-choices">
                                <input type="hidden" asp-for="UserBookDto.IsRecurrence" value="false" class="hiddenIsRecurrence"/>
                                <input type="hidden" asp-for="UserBookDto.RecurrenceType" value="NoRecurrence" class="hiddenRecurrenceType" />
                                <input type="hidden" asp-for="UserBookDto.RecurrenceRepeat" value="1" class="hiddenRecurrenceRepeat" />
                                <button type="button" class="action-btn recurrence-btn no-recurrence">No recurrence</button>
                                <button type="button" class="action-btn recurrence-btn weekly-recurrence">Weekly</button>
                                <button type="button" class="action-btn recurrence-btn monthly-recurrence">Monthly</button>
                                <button type="button" class="action-btn recurrence-btn yearly-recurrence">Yearly</button>
                            </div>
                            <div class="recurrence-container" style="display: none;">                             
                                <div class="recurrence-repeat">
                                    <span>Repeat every </span>
                                    <span class="minus">-</span>
                                    <span class="times">1</span>
                                    <span class="plus">+</span>
                                    <span class="recurrence">week</span>
                                </div>
                            </div>
                            <div class="recurrence-dates">
                                
                            </div>
                            <script>
                                let times = document.querySelector('.times');
                                document.querySelector('.minus').addEventListener('click', function () {
                                    if(times.innerHTML == 1){
                                        return;
                                    }
                                    times.innerHTML = parseInt(times.innerHTML) - 1;
                                    document.querySelector(".hiddenRecurrenceRepeat").value = times.innerHTML;
                                    document.querySelectorAll(".number-item a").forEach(anchor => {
                                        anchor.classList.remove("calendar-today");
                                    });
                                });
                                document.querySelector('.plus').addEventListener('click', function () {
                                    times.innerHTML = parseInt(times.innerHTML) + 1;
                                    document.querySelector(".hiddenRecurrenceRepeat").value = times.innerHTML;
                                    document.querySelectorAll(".number-item a").forEach(anchor => {
                                        anchor.classList.remove("calendar-today");
                                    });
                                });
                                
                                document.querySelectorAll(".recurrence-btn").forEach(btn => btn.addEventListener('click', function (ev) {
                                    document.querySelectorAll(".number-item a").forEach(anchor => {
                                        anchor.classList.remove("calendar-today");
                                    });
                                        
                                    if (ev.srcElement.classList.contains("no-recurrence")) {
                                        console.log("NO RECURRENCE");
                                            document.querySelector(".hiddenIsRecurrence").value = false;
                                            document.querySelector(".hiddenRecurrenceType").value = "NoRecurrence";
                                        document.querySelector(".recurrence-container").style.display = 'none';
                                    } else if (ev.srcElement.classList.contains("weekly-recurrence")) {
                                        document.querySelector(".recurrence").innerHTML = "week";
                                        document.querySelector(".hiddenIsRecurrence").value = true;
                                            document.querySelector(".hiddenRecurrenceType").value = "Weekly";
                                        document.querySelector(".recurrence-container").style.display = 'flex';
                                        times.innerHTML = 1;
                                        document.querySelector(".hiddenRecurrenceRepeat").value = 1;
                                    } else if (ev.srcElement.classList.contains("monthly-recurrence")) {                                     
                                        document.querySelector(".recurrence").innerHTML = "month";
                                        document.querySelector(".hiddenIsRecurrence").value = true;
                                            document.querySelector(".hiddenRecurrenceType").value = "Monthly";
                                            document.querySelector(".recurrence-container").style.display = 'flex';
                                        times.innerHTML = 1;
                                        document.querySelector(".hiddenRecurrenceRepeat").value = 1;
                                    } else if (ev.srcElement.classList.contains("yearly-recurrence")) {
                                        document.querySelector(".recurrence").innerHTML = "year";
                                        document.querySelector(".hiddenIsRecurrence").value = true;
                                            document.querySelector(".hiddenRecurrenceType").value = "Yearly";
                                        document.querySelector(".recurrence-container").style.display = 'flex';
                                        times.innerHTML = 1;
                                        document.querySelector(".hiddenRecurrenceRepeat").value = 1;
                                    }
                                    this.style.background = '#1B4965';
                                    this.style.color = '#000 !important';
                                }));

                            </script>
                        </div>
                        <div class="booking-details">
                            <div class="highlight">Make a reservation</div>
                            <div style="text-align: center;">Please choose a date</div>
                            <div class="calendar"></div>                        
                            <button class="action-btn">SUBMIT</button>
                        </div>                      
                    </form>             
                </div>
            </div>
        </div>
    </div>
    <script src="~/js/common.js"></script>
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    <script>


        // Safely check and log the value
        var errorBooking = @Json.Serialize(TempData["ErrorBooking"] ?? false);
        const dto = @Json.Serialize(@Model);
        console.log(dto);
            
        if (errorBooking) {

            const modal = document.querySelector(".modal");
            if (modal) {
                $('#bookingModal').modal('show');

            } else {
                console.error("Modal element not found");
            }
        }   

        function CalendarControl() {
            const calendar = new Date();
            const calendarControl = {
                localDate: new Date(),
                prevMonthLastDate: null,
                calWeekDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                calMonthName: [
                    "Jan",
                    "Feb",
                    "Mar",
                    "Apr",
                    "May",
                    "Jun",
                    "Jul",
                    "Aug",
                    "Sep",
                    "Oct",
                    "Nov",
                    "Dec"
                ],
                daysInMonth: function (month, year) {
                    return new Date(year, month, 0).getDate();
                },
                firstDay: function () {
                    return new Date(calendar.getFullYear(), calendar.getMonth(), 1);
                },
                lastDay: function () {
                    return new Date(calendar.getFullYear(), calendar.getMonth() + 1, 0);
                },
                firstDayNumber: function () {
                    return calendarControl.firstDay().getDay() + 1;
                },
                lastDayNumber: function () {
                    return calendarControl.lastDay().getDay() + 1;
                },
                getPreviousMonthLastDate: function () {
                    let lastDate = new Date(
                        calendar.getFullYear(),
                        calendar.getMonth(),
                        0
                    ).getDate();
                    return lastDate;
                },
                navigateToPreviousMonth: function () {
                    calendar.setMonth(calendar.getMonth() - 1);
                    calendarControl.attachEventsOnNextPrev();
                },
                navigateToNextMonth: function () {
                    calendar.setMonth(calendar.getMonth() + 1);
                    calendarControl.attachEventsOnNextPrev();
                },
                navigateToCurrentMonth: function () {
                    let currentMonth = calendarControl.localDate.getMonth();
                    let currentYear = calendarControl.localDate.getFullYear();
                    calendar.setMonth(currentMonth);
                    calendar.setYear(currentYear);
                    calendarControl.attachEventsOnNextPrev();
                },
                displayYear: function () {
                    let yearLabel = document.querySelector(".calendar .calendar-year-label");
                    yearLabel.innerHTML = calendar.getFullYear();
                },
                displayMonth: function () {
                    let monthLabel = document.querySelector(
                        ".calendar .calendar-month-label"
                    );
                    monthLabel.innerHTML = calendarControl.calMonthName[calendar.getMonth()];
                },
                selectDate: function (e) {
                    // Check if the selected date is occupied
                    if (!e.srcElement.classList.contains("calendar-occupied") && !e.srcElement.classList.contains("calendar-past-date")) {

                        // If the date is not occupied, proceed with the selection
                        const selectedDay = e.target.textContent.trim(); // Get the selected day number
                        const selectedMonth = calendarControl.calMonthName[calendar.getMonth()]; // Get the month name
                        const selectedYear = calendar.getFullYear(); // Get the year

                        //console.log(e.srcElement);

                        // Format the date as 'YYYY-MM-DD'
                        const formattedDate = `${selectedYear}-${(calendar.getMonth() + 1)
                            .toString()
                            .padStart(2, "0")}-${selectedDay.padStart(2, "0")}`;

                        // Update the hidden input value
                        document.getElementById("bookDate").value = formattedDate;

                        // Update the calendar visual
                        document.querySelectorAll(".number-item a").forEach((anchor) => {
                            anchor.classList.remove("calendar-today");
                        });
                        e.target.classList.add("calendar-today");

                        //console.log(`Selected Date: ${formattedDate}`); // Debugging

                        let isRecurrence = document.querySelector(".hiddenIsRecurrence").value;
                        console.log(isRecurrence);
                        if (isRecurrence == 'true') {
                            const recurrenceType = document.querySelector(".hiddenRecurrenceType").value; // e.g., "weekly", "monthly", "yearly"
                            const recurrenceCount = parseInt(document.querySelector(".hiddenRecurrenceRepeat").value); // e.g., 3
                            console.log("Recurrence Count: " + recurrenceCount);
                            const recurrenceDates = [];

                            const day = parseInt(selectedDay, 10);
                            const month = calendar.getMonth(); // Zero-based index
                            const year = parseInt(selectedYear, 10);

                            let currentDate = new Date(year, month, day);

                            if (recurrenceType === "Weekly") {
                                for (let i = 0; i < recurrenceCount; i++) {
                                    const recurrenceDate = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1)
                                        .toString()
                                        .padStart(2, "0")}-${currentDate.getDate().toString().padStart(2, "0")}`;
                                    recurrenceDates.push(recurrenceDate);

                                    currentDate.setDate(currentDate.getDate() + 7); // Increment by 7 days for weekly recurrence
                                }
                            } else if (recurrenceType === "Monthly") {
                                for (let i = 0; i < recurrenceCount; i++) {
                                    const recurrenceDate = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1)
                                        .toString()
                                        .padStart(2, "0")}-${currentDate.getDate().toString().padStart(2, "0")}`;
                                    recurrenceDates.push(recurrenceDate);

                                    // Increment by 1 month
                                    currentDate.setMonth(currentDate.getMonth() + 1);
                                }
                            } else if (recurrenceType === "Yearly") {
                                for (let i = 0; i < recurrenceCount; i++) { 
                                    const recurrenceDate = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1)
                                        .toString()
                                        .padStart(2, "0")}-${currentDate.getDate().toString().padStart(2, "0")}`;
                                    recurrenceDates.push(recurrenceDate);

                                    // Increment by 1 year
                                    currentDate.setFullYear(currentDate.getFullYear() + 1);
                                }
                            }

                            const bookingsDate = dto.roomDto.bookings;
                            const conflicts = []; // Array to store conflicting dates

                            console.log("Generated Recurrence Dates:", recurrenceDates);
                            console.log("Occupied Dates:", bookingsDate.map(b => b.bookDate));

                            if (bookingsDate != null && bookingsDate.length > 0) {
                                bookingsDate.forEach(booking => {

                                    const bookingDate = new Date(booking.bookDate);
                                    const bookingYear = bookingDate.getFullYear();
                                    const bookingMonth = (bookingDate.getMonth() + 1).toString().padStart(2, '0'); // Zero-pad month
                                    const bookingDay = bookingDate.getDate().toString().padStart(2, '0');

                                    const formattedDate = `${bookingYear}-${bookingMonth}-${bookingDay}`;
                                    console.log(formattedDate);
                                    if (recurrenceDates.includes(formattedDate)) {
                                        conflicts.push(booking);
                                        document.getElementById("bookDate").value = "";
                                    }

                                });
                            }

                            if (conflicts.length > 0) {
                                // Clear any existing alerts before adding a new one
                                const modalBody = document.querySelector(".modal-body");
                                const existingAlert = modalBody.querySelector(".alert.alert-error");
                                if (existingAlert) {
                                    existingAlert.remove(); // Remove the previous alert
                                }

                                let errorModal = document.createElement("div");
                                errorModal.classList.add("alert");
                                errorModal.classList.add("alert-error");
                                errorModal.innerHTML = `<div class="icon__wrapper">
                                                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                                <path d="M10.2908 3.8602L1.82075 18.0002C1.64612 18.3026 1.55372 18.6455 1.55274 18.9947C1.55176 19.3439 1.64224 19.6873 1.81518 19.9907C1.98812 20.2941 2.23748 20.547 2.53846 20.7241C2.83944 20.9012 3.18155 20.9964 3.53075 21.0002H20.4708C20.82 20.9964 21.1621 20.9012 21.463 20.7241C21.764 20.547 22.0134 20.2941 22.1863 19.9907C22.3593 19.6873 22.4497 19.3439 22.4488 18.9947C22.4478 18.6455 22.3554 18.3026 22.1808 18.0002L13.7108 3.8602C13.5325 3.56631 13.2815 3.32332 12.9819 3.15469C12.6824 2.98605 12.3445 2.89746 12.0008 2.89746C11.657 2.89746 11.3191 2.98605 11.0196 3.15469C10.72 3.32332 10.469 3.56631 10.2908 3.8602Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                                                <path d="M12 9V13" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                                                <path d="M12 17H12.01" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                                            </svg>
                                                        </div>
                                                        <p>Date is occupied</p>`;

                                modalBody.appendChild(errorModal);

                                setTimeout(() => {
                                    if (errorModal) {
                                        errorModal.remove();
                                    }
                                }, 5000);

                                e.target.classList.remove("calendar-today");
                            }

                            const calendarMonth = calendar.getMonth() + 1;
                            const calendarYear = calendar.getFullYear();
                            const recurrenceDatesHidden = document.querySelector('.recurrence-dates');
                            recurrenceDatesHidden.innerHTML = '';
                            let index = 0;
                            recurrenceDates.forEach(date => {
                                // Parse the recurrence date
                                let bookingDate = new Date(date);
                                let bookingYear = bookingDate.getFullYear();
                                let bookingMonth = bookingDate.getMonth() + 1; // JS months are zero-indexed
                                let bookingDay = bookingDate.getDate();

                                // Check if the booking date matches the current calendar view
                                if (calendarMonth === bookingMonth && calendarYear === bookingYear) {
                                    // Find all anchor elements representing days in the calendar
                                    document.querySelectorAll(".number-item a").forEach(anchor => {
                                        // Check if the day's text matches the booking day
                                        if (anchor.textContent.trim() === bookingDay.toString()) {
                                            // Add the "calendar-today" class
                                            anchor.classList.add("calendar-today");
                                        }
                                    });
                                }
                                recurrenceDatesHidden.innerHTML += `<input type="hidden" name="UserBookDto.BookDates[${index}]" value="${date}" />`;
                                index++;
                            });


                            console.log("conflicts: ", conflicts);
                            console.log("Recurrence Dates:", recurrenceDates);
 
                        }

                    } else {
                        console.warn("sadasdas.");

                        // Clear any existing alerts before adding a new one
                        const modalBody = document.querySelector(".modal-body");
                        const existingAlert = modalBody.querySelector(".alert.alert-error");
                        if (existingAlert) {
                            existingAlert.remove(); // Remove the previous alert
                        }

                        let errorModal = document.createElement("div");
                        errorModal.classList.add("alert");
                        errorModal.classList.add("alert-error");
                        errorModal.innerHTML = `<div class="icon__wrapper">
                                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                        <path d="M10.2908 3.8602L1.82075 18.0002C1.64612 18.3026 1.55372 18.6455 1.55274 18.9947C1.55176 19.3439 1.64224 19.6873 1.81518 19.9907C1.98812 20.2941 2.23748 20.547 2.53846 20.7241C2.83944 20.9012 3.18155 20.9964 3.53075 21.0002H20.4708C20.82 20.9964 21.1621 20.9012 21.463 20.7241C21.764 20.547 22.0134 20.2941 22.1863 19.9907C22.3593 19.6873 22.4497 19.3439 22.4488 18.9947C22.4478 18.6455 22.3554 18.3026 22.1808 18.0002L13.7108 3.8602C13.5325 3.56631 13.2815 3.32332 12.9819 3.15469C12.6824 2.98605 12.3445 2.89746 12.0008 2.89746C11.657 2.89746 11.3191 2.98605 11.0196 3.15469C10.72 3.32332 10.469 3.56631 10.2908 3.8602Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                                        <path d="M12 9V13" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                                        <path d="M12 17H12.01" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                                    </svg>
                                                </div>
                                                <p>Date is occupied</p>`;

                        modalBody.appendChild(errorModal);
                    }

                    
                    
                },
                plotSelectors: function () {
                    document.querySelector(
                        ".calendar"
                    ).innerHTML += `<div class="calendar-inner"><div class="calendar-controls">
                        <div class="calendar-prev"><a href="#"><svg xmlns="http://www.w3.org/2000/svg" width="128" height="128" viewBox="0 0 128 128"><path fill="#666" d="M88.2 3.8L35.8 56.23 28 64l7.8 7.78 52.4 52.4 9.78-7.76L45.58 64l52.4-52.4z"/></svg></a></div>
                        <div class="calendar-year-month">
                        <div class="calendar-month-label"></div>
                        <div>-</div>
                        <div class="calendar-year-label"></div>
                        </div>
                        <div class="calendar-next"><a href="#"><svg xmlns="http://www.w3.org/2000/svg" width="128" height="128" viewBox="0 0 128 128"><path fill="#666" d="M38.8 124.2l52.4-52.42L99 64l-7.77-7.78-52.4-52.4-9.8 7.77L81.44 64 29 116.42z"/></svg></a></div>
                        </div>
                        <div class="calendar-today-date">Today:
                        ${calendarControl.calWeekDays[calendarControl.localDate.getDay()]},
                        ${calendarControl.localDate.getDate()},
                        ${calendarControl.calMonthName[calendarControl.localDate.getMonth()]}
                        ${calendarControl.localDate.getFullYear()}
                        </div>
                        <div class="calendar-body"></div></div>`;
                },
                plotDayNames: function () {
                    for (let i = 0; i < calendarControl.calWeekDays.length; i++) {
                        document.querySelector(
                            ".calendar .calendar-body"
                        ).innerHTML += `<div>${calendarControl.calWeekDays[i]}</div>`;
                    }
                },
                plotDates: function () {
                    document.querySelector(".calendar .calendar-body").innerHTML = "";
                    calendarControl.plotDayNames();
                    calendarControl.displayMonth();
                    calendarControl.displayYear();
                    let count = 1;
                    let prevDateCount = 0;

                    calendarControl.prevMonthLastDate = calendarControl.getPreviousMonthLastDate();
                    let prevMonthDatesArray = [];
                    let calendarDays = calendarControl.daysInMonth(
                        calendar.getMonth() + 1,
                        calendar.getFullYear()
                    );
                    // dates of current month
                    for (let i = 1; i < calendarDays; i++) {
                        if (i < calendarControl.firstDayNumber()) {
                            prevDateCount += 1;
                            document.querySelector(
                                ".calendar .calendar-body"
                            ).innerHTML += `<div class="prev-dates"></div>`;
                            prevMonthDatesArray.push(calendarControl.prevMonthLastDate--);
                        } else {
                            document.querySelector(
                                ".calendar .calendar-body"
                            ).innerHTML += `<div class="number-item" data-num=${count}><a class="dateNumber" href="#">${count++}</a></div>`;
                        }
                    }
                    //remaining dates after month dates
                    for (let j = 0; j < prevDateCount + 1; j++) {
                        document.querySelector(
                            ".calendar .calendar-body"
                        ).innerHTML += `<div class="number-item" data-num=${count}><a class="dateNumber" href="#">${count++}</a></div>`;
                    }
                    calendarControl.highlightToday();
                    calendarControl.plotPrevMonthDates(prevMonthDatesArray);
                    calendarControl.plotNextMonthDates();
                },
                attachEvents: function () {
                    let prevBtn = document.querySelector(".calendar .calendar-prev a");
                    let nextBtn = document.querySelector(".calendar .calendar-next a");
                    let todayDate = document.querySelector(".calendar .calendar-today-date");
                    let dateNumber = document.querySelectorAll(".calendar .dateNumber");
                    prevBtn.addEventListener(
                        "click",
                        calendarControl.navigateToPreviousMonth
                    );
                    nextBtn.addEventListener("click", calendarControl.navigateToNextMonth);
                    todayDate.addEventListener(
                        "click",
                        calendarControl.navigateToCurrentMonth
                    );
                    for (var i = 0; i < dateNumber.length; i++) {
                        dateNumber[i].addEventListener(
                            "click",
                            calendarControl.selectDate,
                            false
                        );
                    }
                },
                highlightToday: function () {
                    const hiddenBookDate = document.getElementById("bookDate").value;

                    const [year, month, day] = hiddenBookDate.split("-").map(Number);

                    const calendarMonth = calendar.getMonth() + 1;
                    const calendarYear = calendar.getFullYear();

                    const bookingsDate = dto.roomDto.bookings;
                    if (bookingsDate != null && bookingsDate.length != 0) { 
                        bookingsDate.forEach(booking => {
                            const bookingDate = new Date(booking.bookDate);
                            const bookingYear = bookingDate.getFullYear();
                            const bookingMonth = bookingDate.getMonth() + 1; // Months are 0-indexed
                            const bookingDay = bookingDate.getDate();

                            if (calendarMonth === bookingMonth && calendarYear === bookingYear) {

                                document.querySelectorAll(".number-item a").forEach(anchor => {           
                                    if (anchor.textContent.trim() === bookingDay.toString()) {
                                        anchor.classList.add("calendar-occupied");
                                    }
                                });
                            }
                        });
                    }

                    const todayDate = new Date();
                    const todayYear = todayDate.getFullYear();
                    const todayMonth = todayDate.getMonth() + 1; // Months are 0-indexed    
                    const todayDay = todayDate.getDate();
                    console.log(todayMonth);
                    console.log(calendarMonth);
                    document.querySelectorAll(".number-item a").forEach(anchor => {
                        anchor.classList.remove("calendar-past-date");

                        const anchorDay = parseInt(anchor.textContent.trim(), 10);
                        const currentDate = new Date(calendarYear, calendarMonth - 1, anchorDay); // Construct the date based on clicked month/year
                        const today = new Date(); // Today's date

                        // Clear the time component from today's date
                        today.setHours(0, 0, 0, 0);

                        // Compare the constructed date with today's date
                        if (currentDate < today) {
                            anchor.classList.add("calendar-past-date");
                        }
                    });


                    if (!hiddenBookDate) {
                        console.warn("No date is set in the hidden input.");
                        return;
                    }

                    

                    if (calendarMonth === month && calendarYear === year) {

                        document.querySelectorAll(".number-item a").forEach(anchor => {

                            anchor.classList.remove("calendar-today");


                            if (anchor.textContent.trim() === day.toString()) {
                                anchor.classList.add("calendar-today");
                            }
                        });
                    }

                    

                   
                },
                plotPrevMonthDates: function (dates) {
                    dates.reverse();
                    for (let i = 0; i < dates.length; i++) {
                        if (document.querySelectorAll(".prev-dates")) {
                            document.querySelectorAll(".prev-dates")[i].textContent = dates[i];
                        }
                    }
                },
                plotPrevMonthDates: function (dates) {
                    dates.reverse();
                    for (let i = 0; i < dates.length; i++) {
                        if (document.querySelectorAll(".prev-dates")) {
                            document.querySelectorAll(".prev-dates")[i].textContent = dates[i];
                        }
                    }
                },
                plotNextMonthDates: function () {
                    let childElemCount = document.querySelector('.calendar-body').childElementCount;
                    //7 lines
                    if (childElemCount > 42) {
                        let diff = 49 - childElemCount;
                        calendarControl.loopThroughNextDays(diff);
                    }

                    //6 lines
                    if (childElemCount > 35 && childElemCount <= 42) {
                        let diff = 42 - childElemCount;
                        calendarControl.loopThroughNextDays(42 - childElemCount);
                    }

                },
                loopThroughNextDays: function (count) {
                    if (count > 0) {
                        for (let i = 1; i <= count; i++) {
                            document.querySelector('.calendar-body').innerHTML += `<div class="next-dates">${i}</div>`;
                        }
                    }
                },
                attachEventsOnNextPrev: function () {
                    calendarControl.plotDates();
                    calendarControl.attachEvents();
                },
                init: function () {
                    calendarControl.plotSelectors();
                    calendarControl.plotDates();
                    calendarControl.attachEvents();
                }
            };
            calendarControl.init();
        }

        const calendarControl = new CalendarControl();
    </script>
</body>
</html>